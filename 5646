using System;
using System.IO;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using System.Threading;

namespace n$namespace
{
    public class c$class
    {
        [DllImport("user32.dll")]
        private static extern short GetAsyncKeyState(int vKey);
        [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
        private static extern IntPtr GetForegroundWindow();
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern int GetWindowThreadProcessId(IntPtr handle, out int processId);
        [DllImport("user32.dll", SetLastError = true)]
        static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll")]
        public static extern IntPtr SendMessage(IntPtr hWnd, uint wMsg, UIntPtr wParam, IntPtr lParam);
        [DllImport("kernel32.dll")]
        static extern IntPtr GetConsoleWindow();
        [DllImport("user32.dll")]
        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        public static IntPtr MAKELPARAM(int p, int p_2)
        {
            return (IntPtr)((p_2 << 16) | (p & 0xFFFF));
        }

        private static int GetKey(string s)
        {
            return (int)Enum.Parse(typeof(ConsoleKey), s);
        }

        private static string GetKeyString(string s)
        {
            if (string.IsNullOrEmpty(s))
            {
                return string.Empty;
            }
            s = s.ToLower();
            s = char.ToUpper(s[0]) + s.Substring(1);
            return s;
        }

        private static long GetSystemTime()
        {
            return BitConverter.ToInt64(BitConverter.GetBytes(DateTimeOffset.Now.ToUnixTimeMilliseconds()), 0);
        }

        static Random rand;
        static string[] KeybindString = new string[3];
        static int[] Keybinds = new int[3];
        static bool ClickerEnabled;
        static bool WindowVisible;
        static int StatusRow;
        static IntPtr ConsoleWindow;
        static IntPtr ForegroundWindow;
        static IntPtr MCWindow;

        private static double GetRandomDouble(double minimum, double maximum)
        {
            return rand.NextDouble() * (maximum - minimum) + minimum;
        }

        public static void Init(string toggle, string hide, string disable)
        {
            KeybindString[0] = GetKeyString(toggle);
            KeybindString[1] = GetKeyString(hide);
            KeybindString[2] = GetKeyString(disable);
            Keybinds[0] = GetKey(KeybindString[0]);
            Keybinds[1] = GetKey(KeybindString[1]);
            Keybinds[2] = GetKey(KeybindString[2]);

            ClickerEnabled = true;
            WindowVisible = true;

            Console.WriteLine("");
            Console.WriteLine("Keybinds:");
            Console.WriteLine("  - Toggle Clicker: " + KeybindString[0]);
            Console.WriteLine("  - Hide/Show Window: " + KeybindString[1]);
            Console.WriteLine("  - Disable Clicker (Change Profile): " + KeybindString[2]);
            Console.WriteLine("");
        }

        public static void DrawStatus(int row, bool enabled)
        {
            Console.SetCursorPosition(1, row);
            Console.WriteLine("Status: " + (enabled ? "\x1b[92mEnabled \x1b[0m" : "\x1b[91mDisabled\x1b[0m"));
        }

        public static void DrawStatus(int row, bool enabled, string label, string value)
        {
            Console.SetCursorPosition(1, row);
            Console.WriteLine("Status: " + (enabled ? "\x1b[92mEnabled \x1b[0m" : "\x1b[91mDisabled\x1b[0m"));
            Console.SetCursorPosition(1, row + 1);
            Console.WriteLine(label + ": " + value + "   ");
        }

        public static void DrawStatus(int row, bool enabled, string label, int value)
        {
            Console.SetCursorPosition(1, row);
            Console.WriteLine("Status: " + (enabled ? "\x1b[92mEnabled \x1b[0m" : "\x1b[91mDisabled\x1b[0m"));
            Console.SetCursorPosition(1, row + 1);
            Console.WriteLine(label + ": " + value + "   ");
        }

        public static bool MinOverMaxCheck(int min, int max)
        {
            if (min > max)
            {
                Console.WriteLine("Minimum CPS cannot be over Maximum CPS");
                return true;
            }
            return false;
        }

        // KeyStates[0] = Left Mouse Button
        static bool[] KeyStates = new bool[3];
        static bool[] PrevKeyStates = new bool[3];

        public static bool Binds()
        {
            bool ReturnValue = true;
            PrevKeyStates[0] = KeyStates[0];
            KeyStates[0] = BitConverter.GetBytes(GetAsyncKeyState(Keybinds[0]))[1] == 0x80;
            PrevKeyStates[1] = KeyStates[1];
            KeyStates[1] = BitConverter.GetBytes(GetAsyncKeyState(Keybinds[1]))[1] == 0x80;
            PrevKeyStates[2] = KeyStates[2];
            KeyStates[2] = BitConverter.GetBytes(GetAsyncKeyState(Keybinds[2]))[1] == 0x80;

            // Toggle Clicker
            if (PrevKeyStates[0] != KeyStates[0] && KeyStates[0])
            {
                ClickerEnabled = !ClickerEnabled;
                DrawStatus(StatusRow, ClickerEnabled);
            }

            // Hide/Show Window
            if (PrevKeyStates[1] != KeyStates[1] && KeyStates[1])
            {
                WindowVisible = !WindowVisible;
                ShowWindow(ConsoleWindow, WindowVisible ? 5 : 0);
            }

            // Disable Clicker (Change Profile)
            if (PrevKeyStates[2] != KeyStates[2] && KeyStates[2])
            {
                ClickerEnabled = false;
                DrawStatus(StatusRow, ClickerEnabled);
                if (!WindowVisible) ShowWindow(ConsoleWindow, 5);
                ReturnValue = false;
            }
            return ReturnValue;
        }

        // Randomization
        public static void Basic(string[] args)
        {
            bool running = true;

            StatusRow = Console.CursorTop;

            int MinimumCPS = Int32.Parse(args[4]);
            int MaximumCPS = Int32.Parse(args[5]);
            if (MinOverMaxCheck(MinimumCPS, MaximumCPS)) return;
            DrawStatus(StatusRow, ClickerEnabled);

            bool ButtonUpOrDown = false; // false = down, true = up
            long ClickWaitTill = 0;
            long RightNow = GetSystemTime();

            while (running)
            {
                ForegroundWindow = GetForegroundWindow();
                MCWindow = FindWindow("LWJGL", null);

                // Clicker code
                if (ClickerEnabled)
                {
                    if (BitConverter.GetBytes(GetAsyncKeyState(1))[1] == 0x80)
                    {
                        if (MCWindow == ForegroundWindow)
                        {
                            // 0x0084 = WM_NCHITTEST
                            if (SendMessage(ForegroundWindow, 0x0084, UIntPtr.Zero, MAKELPARAM(Cursor.Position.X, Cursor.Position.Y)) == (IntPtr)1)
                            {
                                RightNow = GetSystemTime();
                                if (RightNow >= ClickWaitTill)
                                {
                                    if (ButtonUpOrDown) SendMessage(ForegroundWindow, 0x0202, UIntPtr.Zero, MAKELPARAM(Cursor.Position.X, Cursor.Position.Y));
                                    else SendMessage(ForegroundWindow, 0x0201, (UIntPtr)0x0002, MAKELPARAM(Cursor.Position.X, Cursor.Position.Y));
                                    ButtonUpOrDown = !ButtonUpOrDown;

                                    int SleepTime = rand.Next((500 / MaximumCPS), (500 / MinimumCPS));
                                    ClickWaitTill = RightNow + SleepTime;
                                }
                            }
                        }
                    }
                    else ButtonUpOrDown = false;
                }

                if (!Binds()) running = false;
            }
            return;
        }

        public static void OldVoid(string[] args)
        {
            bool running = true;

            StatusRow = Console.CursorTop;

            int MinimumCPS = Int32.Parse(args[4]);
            int MaximumCPS = Int32.Parse(args[5]);
            if (MinOverMaxCheck(MinimumCPS, MaximumCPS)) return;
            DrawStatus(StatusRow, ClickerEnabled);

            while (running)
            {
                ForegroundWindow = GetForegroundWindow();
                MCWindow = Find
